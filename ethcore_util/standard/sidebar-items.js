initSidebarItems({"enum":[["FromHexError","Errors that can occur when decoding a hex encoded string"],["Json","Represents a json value"]],"mod":[["cmp","Functionality for ordering and comparison."],["fmt","Utilities for formatting and printing `String`s"],["fs","Filesystem manipulation operations."],["io","Traits, helpers, and type definitions for core I/O functionality."],["mem","Basic functions for dealing with memory."],["ops","Overloadable operators."],["option","Optional values."],["ptr","Raw, unsafe pointers, `*const T`, and `*mut T`."],["result","Error handling with the `Result` type."],["slice","A dynamically-sized view into a contiguous sequence, `[T]`."],["str","Unicode string slices."]],"struct":[["Arc","A thread-safe reference-counting pointer."],["Condvar","A Condition Variable"],["Mutex","A mutual exclusion primitive useful for protecting shared data"],["MutexGuard","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked."],["Path","A slice of a path (akin to [`str`])."],["RwLock","A reader-writer lock"],["RwLockReadGuard","RAII structure used to release the shared read access of a lock when dropped."],["RwLockWriteGuard","RAII structure used to release the exclusive write access of a lock when dropped."]],"trait":[["FromBase64","A trait for converting from base64 encoded values."],["FromHex","A trait for converting hexadecimal encoded values"],["FromStr","A trait to abstract the idea of creating a new instance of a type from a string."],["Hash","A hashable type."],["Hasher","A trait which represents the ability to hash an arbitrary stream of bytes."],["HeapSizeOf",""],["Itertools","The trait `Itertools`: extra iterator adaptors and methods for iterators."],["Read","The `Read` trait allows for reading bytes from a source."],["StdError","Base functionality for all errors in Rust."],["Write","A trait for objects which are byte-oriented sinks."]]});