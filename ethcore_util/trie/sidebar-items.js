initSidebarItems({"enum":[["TrieError","Trie Errors."],["TrieKinds","All different kinds of tries. This is used to prevent a heap allocation for every created trie."],["TrieSpec","Trie types"]],"mod":[["node","Export the node module."],["recorder","Trie query recording."],["sectriedb","Export the sectriedb module."],["sectriedbmut","Export the sectriedbmut module."],["standardmap","Export the standardmap module. Key-value datastore with a modified Merkle tree."],["triedb","Export the triedb module."],["triedbmut","Export the triedbmut module. In-memory trie representation."]],"struct":[["FatDB","A `Trie` implementation which hashes keys and uses a generic `HashDB` backing database. Additionaly it stores inserted hash-key mappings for later retrieval."],["FatDBIterator","Itarator over inserted pairs of key values."],["FatDBMut","A mutable `Trie` implementation which hashes keys and uses a generic `HashDB` backing database. Additionaly it stores inserted hash-key mappings for later retrieval."],["TrieFactory","Trie factory."]],"trait":[["Trie","A key-value datastore implemented as a database-backed modified Merkle tree."],["TrieIterator","A trie iterator that also supports random access."],["TrieMut","A key-value datastore implemented as a database-backed modified Merkle tree."]],"type":[["Result","Trie result type. Boxed to avoid copying around extra space for `H256`s on successful queries."],["TrieItem","Trie-Item type."]]});